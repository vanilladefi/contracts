/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface VanillaV1Router02Interface extends ethers.utils.Interface {
  functions: {
    "buy(tuple)": FunctionFragment;
    "epoch()": FunctionFragment;
    "estimateReward(address,address,uint256,uint256)": FunctionFragment;
    "execute(bytes[])": FunctionFragment;
    "executePayable(bytes[])": FunctionFragment;
    "migratePosition(address,address)": FunctionFragment;
    "safeList()": FunctionFragment;
    "sell(tuple)": FunctionFragment;
    "tokenPriceData(address,address)": FunctionFragment;
    "uniswapV3SwapCallback(int256,int256,bytes)": FunctionFragment;
    "vnlContract()": FunctionFragment;
    "withdrawTokens(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "buy",
    values: [
      {
        token: string;
        useWETH: boolean;
        numEth: BigNumberish;
        numToken: BigNumberish;
        blockTimeDeadline: BigNumberish;
        fee: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(functionFragment: "epoch", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "estimateReward",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "executePayable",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "migratePosition",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "safeList", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "sell",
    values: [
      {
        token: string;
        useWETH: boolean;
        numEth: BigNumberish;
        numToken: BigNumberish;
        blockTimeDeadline: BigNumberish;
        fee: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenPriceData",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapV3SwapCallback",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "vnlContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawTokens",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "buy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "epoch", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "estimateReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executePayable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "migratePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "safeList", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sell", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenPriceData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV3SwapCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vnlContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawTokens",
    data: BytesLike
  ): Result;

  events: {
    "TokensPurchased(address,address,uint256,uint256)": EventFragment;
    "TokensSold(address,address,uint256,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "TokensPurchased"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokensSold"): EventFragment;
}

export class VanillaV1Router02 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: VanillaV1Router02Interface;

  functions: {
    buy(
      buyOrder: {
        token: string;
        useWETH: boolean;
        numEth: BigNumberish;
        numToken: BigNumberish;
        blockTimeDeadline: BigNumberish;
        fee: BigNumberish;
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    epoch(overrides?: CallOverrides): Promise<[BigNumber]>;

    estimateReward(
      owner: string,
      token: string,
      numEth: BigNumberish,
      numTokensSold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        [
          [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
            price: BigNumber;
            twapPeriodInSeconds: BigNumber;
            profitablePrice: BigNumber;
            maxProfitablePrice: BigNumber;
            rewardableProfit: BigNumber;
            reward: BigNumber;
          },
          [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
            price: BigNumber;
            twapPeriodInSeconds: BigNumber;
            profitablePrice: BigNumber;
            maxProfitablePrice: BigNumber;
            rewardableProfit: BigNumber;
            reward: BigNumber;
          },
          [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
            price: BigNumber;
            twapPeriodInSeconds: BigNumber;
            profitablePrice: BigNumber;
            maxProfitablePrice: BigNumber;
            rewardableProfit: BigNumber;
            reward: BigNumber;
          }
        ] & {
          low: [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ] & {
            price: BigNumber;
            twapPeriodInSeconds: BigNumber;
            profitablePrice: BigNumber;
            maxProfitablePrice: BigNumber;
            rewardableProfit: BigNumber;
            reward: BigNumber;
          };
          medium: [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ] & {
            price: BigNumber;
            twapPeriodInSeconds: BigNumber;
            profitablePrice: BigNumber;
            maxProfitablePrice: BigNumber;
            rewardableProfit: BigNumber;
            reward: BigNumber;
          };
          high: [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ] & {
            price: BigNumber;
            twapPeriodInSeconds: BigNumber;
            profitablePrice: BigNumber;
            maxProfitablePrice: BigNumber;
            rewardableProfit: BigNumber;
            reward: BigNumber;
          };
        }
      ] & {
        avgBlock: BigNumber;
        htrs: BigNumber;
        estimate: [
          [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
            price: BigNumber;
            twapPeriodInSeconds: BigNumber;
            profitablePrice: BigNumber;
            maxProfitablePrice: BigNumber;
            rewardableProfit: BigNumber;
            reward: BigNumber;
          },
          [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
            price: BigNumber;
            twapPeriodInSeconds: BigNumber;
            profitablePrice: BigNumber;
            maxProfitablePrice: BigNumber;
            rewardableProfit: BigNumber;
            reward: BigNumber;
          },
          [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
            price: BigNumber;
            twapPeriodInSeconds: BigNumber;
            profitablePrice: BigNumber;
            maxProfitablePrice: BigNumber;
            rewardableProfit: BigNumber;
            reward: BigNumber;
          }
        ] & {
          low: [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ] & {
            price: BigNumber;
            twapPeriodInSeconds: BigNumber;
            profitablePrice: BigNumber;
            maxProfitablePrice: BigNumber;
            rewardableProfit: BigNumber;
            reward: BigNumber;
          };
          medium: [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ] & {
            price: BigNumber;
            twapPeriodInSeconds: BigNumber;
            profitablePrice: BigNumber;
            maxProfitablePrice: BigNumber;
            rewardableProfit: BigNumber;
            reward: BigNumber;
          };
          high: [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ] & {
            price: BigNumber;
            twapPeriodInSeconds: BigNumber;
            profitablePrice: BigNumber;
            maxProfitablePrice: BigNumber;
            rewardableProfit: BigNumber;
            reward: BigNumber;
          };
        };
      }
    >;

    execute(
      data: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    executePayable(
      data: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    migratePosition(
      token: string,
      nextVersion: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    safeList(overrides?: CallOverrides): Promise<[string]>;

    sell(
      sellOrder: {
        token: string;
        useWETH: boolean;
        numEth: BigNumberish;
        numToken: BigNumberish;
        blockTimeDeadline: BigNumberish;
        fee: BigNumberish;
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tokenPriceData(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, number] & {
        weightedBlockSum: BigNumber;
        ethSum: BigNumber;
        tokenSum: BigNumber;
        latestBlock: number;
      }
    >;

    uniswapV3SwapCallback(
      amount0Delta: BigNumberish,
      amount1Delta: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    vnlContract(overrides?: CallOverrides): Promise<[string]>;

    withdrawTokens(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  buy(
    buyOrder: {
      token: string;
      useWETH: boolean;
      numEth: BigNumberish;
      numToken: BigNumberish;
      blockTimeDeadline: BigNumberish;
      fee: BigNumberish;
    },
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  epoch(overrides?: CallOverrides): Promise<BigNumber>;

  estimateReward(
    owner: string,
    token: string,
    numEth: BigNumberish,
    numTokensSold: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      [
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          price: BigNumber;
          twapPeriodInSeconds: BigNumber;
          profitablePrice: BigNumber;
          maxProfitablePrice: BigNumber;
          rewardableProfit: BigNumber;
          reward: BigNumber;
        },
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          price: BigNumber;
          twapPeriodInSeconds: BigNumber;
          profitablePrice: BigNumber;
          maxProfitablePrice: BigNumber;
          rewardableProfit: BigNumber;
          reward: BigNumber;
        },
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          price: BigNumber;
          twapPeriodInSeconds: BigNumber;
          profitablePrice: BigNumber;
          maxProfitablePrice: BigNumber;
          rewardableProfit: BigNumber;
          reward: BigNumber;
        }
      ] & {
        low: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          price: BigNumber;
          twapPeriodInSeconds: BigNumber;
          profitablePrice: BigNumber;
          maxProfitablePrice: BigNumber;
          rewardableProfit: BigNumber;
          reward: BigNumber;
        };
        medium: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          price: BigNumber;
          twapPeriodInSeconds: BigNumber;
          profitablePrice: BigNumber;
          maxProfitablePrice: BigNumber;
          rewardableProfit: BigNumber;
          reward: BigNumber;
        };
        high: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          price: BigNumber;
          twapPeriodInSeconds: BigNumber;
          profitablePrice: BigNumber;
          maxProfitablePrice: BigNumber;
          rewardableProfit: BigNumber;
          reward: BigNumber;
        };
      }
    ] & {
      avgBlock: BigNumber;
      htrs: BigNumber;
      estimate: [
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          price: BigNumber;
          twapPeriodInSeconds: BigNumber;
          profitablePrice: BigNumber;
          maxProfitablePrice: BigNumber;
          rewardableProfit: BigNumber;
          reward: BigNumber;
        },
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          price: BigNumber;
          twapPeriodInSeconds: BigNumber;
          profitablePrice: BigNumber;
          maxProfitablePrice: BigNumber;
          rewardableProfit: BigNumber;
          reward: BigNumber;
        },
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          price: BigNumber;
          twapPeriodInSeconds: BigNumber;
          profitablePrice: BigNumber;
          maxProfitablePrice: BigNumber;
          rewardableProfit: BigNumber;
          reward: BigNumber;
        }
      ] & {
        low: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          price: BigNumber;
          twapPeriodInSeconds: BigNumber;
          profitablePrice: BigNumber;
          maxProfitablePrice: BigNumber;
          rewardableProfit: BigNumber;
          reward: BigNumber;
        };
        medium: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          price: BigNumber;
          twapPeriodInSeconds: BigNumber;
          profitablePrice: BigNumber;
          maxProfitablePrice: BigNumber;
          rewardableProfit: BigNumber;
          reward: BigNumber;
        };
        high: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          price: BigNumber;
          twapPeriodInSeconds: BigNumber;
          profitablePrice: BigNumber;
          maxProfitablePrice: BigNumber;
          rewardableProfit: BigNumber;
          reward: BigNumber;
        };
      };
    }
  >;

  execute(
    data: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  executePayable(
    data: BytesLike[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  migratePosition(
    token: string,
    nextVersion: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  safeList(overrides?: CallOverrides): Promise<string>;

  sell(
    sellOrder: {
      token: string;
      useWETH: boolean;
      numEth: BigNumberish;
      numToken: BigNumberish;
      blockTimeDeadline: BigNumberish;
      fee: BigNumberish;
    },
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tokenPriceData(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, number] & {
      weightedBlockSum: BigNumber;
      ethSum: BigNumber;
      tokenSum: BigNumber;
      latestBlock: number;
    }
  >;

  uniswapV3SwapCallback(
    amount0Delta: BigNumberish,
    amount1Delta: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  vnlContract(overrides?: CallOverrides): Promise<string>;

  withdrawTokens(
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    buy(
      buyOrder: {
        token: string;
        useWETH: boolean;
        numEth: BigNumberish;
        numToken: BigNumberish;
        blockTimeDeadline: BigNumberish;
        fee: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    epoch(overrides?: CallOverrides): Promise<BigNumber>;

    estimateReward(
      owner: string,
      token: string,
      numEth: BigNumberish,
      numTokensSold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        [
          [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
            price: BigNumber;
            twapPeriodInSeconds: BigNumber;
            profitablePrice: BigNumber;
            maxProfitablePrice: BigNumber;
            rewardableProfit: BigNumber;
            reward: BigNumber;
          },
          [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
            price: BigNumber;
            twapPeriodInSeconds: BigNumber;
            profitablePrice: BigNumber;
            maxProfitablePrice: BigNumber;
            rewardableProfit: BigNumber;
            reward: BigNumber;
          },
          [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
            price: BigNumber;
            twapPeriodInSeconds: BigNumber;
            profitablePrice: BigNumber;
            maxProfitablePrice: BigNumber;
            rewardableProfit: BigNumber;
            reward: BigNumber;
          }
        ] & {
          low: [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ] & {
            price: BigNumber;
            twapPeriodInSeconds: BigNumber;
            profitablePrice: BigNumber;
            maxProfitablePrice: BigNumber;
            rewardableProfit: BigNumber;
            reward: BigNumber;
          };
          medium: [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ] & {
            price: BigNumber;
            twapPeriodInSeconds: BigNumber;
            profitablePrice: BigNumber;
            maxProfitablePrice: BigNumber;
            rewardableProfit: BigNumber;
            reward: BigNumber;
          };
          high: [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ] & {
            price: BigNumber;
            twapPeriodInSeconds: BigNumber;
            profitablePrice: BigNumber;
            maxProfitablePrice: BigNumber;
            rewardableProfit: BigNumber;
            reward: BigNumber;
          };
        }
      ] & {
        avgBlock: BigNumber;
        htrs: BigNumber;
        estimate: [
          [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
            price: BigNumber;
            twapPeriodInSeconds: BigNumber;
            profitablePrice: BigNumber;
            maxProfitablePrice: BigNumber;
            rewardableProfit: BigNumber;
            reward: BigNumber;
          },
          [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
            price: BigNumber;
            twapPeriodInSeconds: BigNumber;
            profitablePrice: BigNumber;
            maxProfitablePrice: BigNumber;
            rewardableProfit: BigNumber;
            reward: BigNumber;
          },
          [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
            price: BigNumber;
            twapPeriodInSeconds: BigNumber;
            profitablePrice: BigNumber;
            maxProfitablePrice: BigNumber;
            rewardableProfit: BigNumber;
            reward: BigNumber;
          }
        ] & {
          low: [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ] & {
            price: BigNumber;
            twapPeriodInSeconds: BigNumber;
            profitablePrice: BigNumber;
            maxProfitablePrice: BigNumber;
            rewardableProfit: BigNumber;
            reward: BigNumber;
          };
          medium: [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ] & {
            price: BigNumber;
            twapPeriodInSeconds: BigNumber;
            profitablePrice: BigNumber;
            maxProfitablePrice: BigNumber;
            rewardableProfit: BigNumber;
            reward: BigNumber;
          };
          high: [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ] & {
            price: BigNumber;
            twapPeriodInSeconds: BigNumber;
            profitablePrice: BigNumber;
            maxProfitablePrice: BigNumber;
            rewardableProfit: BigNumber;
            reward: BigNumber;
          };
        };
      }
    >;

    execute(data: BytesLike[], overrides?: CallOverrides): Promise<string[]>;

    executePayable(
      data: BytesLike[],
      overrides?: CallOverrides
    ): Promise<string[]>;

    migratePosition(
      token: string,
      nextVersion: string,
      overrides?: CallOverrides
    ): Promise<void>;

    safeList(overrides?: CallOverrides): Promise<string>;

    sell(
      sellOrder: {
        token: string;
        useWETH: boolean;
        numEth: BigNumberish;
        numToken: BigNumberish;
        blockTimeDeadline: BigNumberish;
        fee: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    tokenPriceData(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, number] & {
        weightedBlockSum: BigNumber;
        ethSum: BigNumber;
        tokenSum: BigNumber;
        latestBlock: number;
      }
    >;

    uniswapV3SwapCallback(
      amount0Delta: BigNumberish,
      amount1Delta: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    vnlContract(overrides?: CallOverrides): Promise<string>;

    withdrawTokens(token: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    TokensPurchased(
      buyer?: string | null,
      token?: string | null,
      eth?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      { buyer: string; token: string; eth: BigNumber; amount: BigNumber }
    >;

    TokensSold(
      seller?: string | null,
      token?: string | null,
      amount?: null,
      eth?: null,
      profit?: null,
      reward?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        seller: string;
        token: string;
        amount: BigNumber;
        eth: BigNumber;
        profit: BigNumber;
        reward: BigNumber;
      }
    >;
  };

  estimateGas: {
    buy(
      buyOrder: {
        token: string;
        useWETH: boolean;
        numEth: BigNumberish;
        numToken: BigNumberish;
        blockTimeDeadline: BigNumberish;
        fee: BigNumberish;
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    epoch(overrides?: CallOverrides): Promise<BigNumber>;

    estimateReward(
      owner: string,
      token: string,
      numEth: BigNumberish,
      numTokensSold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    execute(
      data: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    executePayable(
      data: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    migratePosition(
      token: string,
      nextVersion: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    safeList(overrides?: CallOverrides): Promise<BigNumber>;

    sell(
      sellOrder: {
        token: string;
        useWETH: boolean;
        numEth: BigNumberish;
        numToken: BigNumberish;
        blockTimeDeadline: BigNumberish;
        fee: BigNumberish;
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tokenPriceData(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    uniswapV3SwapCallback(
      amount0Delta: BigNumberish,
      amount1Delta: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    vnlContract(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawTokens(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    buy(
      buyOrder: {
        token: string;
        useWETH: boolean;
        numEth: BigNumberish;
        numToken: BigNumberish;
        blockTimeDeadline: BigNumberish;
        fee: BigNumberish;
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    epoch(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    estimateReward(
      owner: string,
      token: string,
      numEth: BigNumberish,
      numTokensSold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    execute(
      data: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    executePayable(
      data: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    migratePosition(
      token: string,
      nextVersion: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    safeList(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sell(
      sellOrder: {
        token: string;
        useWETH: boolean;
        numEth: BigNumberish;
        numToken: BigNumberish;
        blockTimeDeadline: BigNumberish;
        fee: BigNumberish;
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tokenPriceData(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    uniswapV3SwapCallback(
      amount0Delta: BigNumberish,
      amount1Delta: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    vnlContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawTokens(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
