/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface VanillaV1Safelist01Interface extends ethers.utils.Interface {
  functions: {
    "approveNextVersion(address)": FunctionFragment;
    "isSafelisted(address)": FunctionFragment;
    "modify(address[],address[])": FunctionFragment;
    "nextVersion()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "approveNextVersion",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isSafelisted",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "modify",
    values: [string[], string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "nextVersion",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "approveNextVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isSafelisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "modify", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nextVersion",
    data: BytesLike
  ): Result;

  events: {
    "TokensAdded(address[])": EventFragment;
    "TokensRemoved(address[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "TokensAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokensRemoved"): EventFragment;
}

export class VanillaV1Safelist01 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: VanillaV1Safelist01Interface;

  functions: {
    approveNextVersion(
      implementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isSafelisted(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    modify(
      added: string[],
      removed: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    nextVersion(overrides?: CallOverrides): Promise<[string]>;
  };

  approveNextVersion(
    implementation: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isSafelisted(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  modify(
    added: string[],
    removed: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  nextVersion(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    approveNextVersion(
      implementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isSafelisted(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    modify(
      added: string[],
      removed: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    nextVersion(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    TokensAdded(
      tokens?: null
    ): TypedEventFilter<[string[]], { tokens: string[] }>;

    TokensRemoved(
      tokens?: null
    ): TypedEventFilter<[string[]], { tokens: string[] }>;
  };

  estimateGas: {
    approveNextVersion(
      implementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isSafelisted(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    modify(
      added: string[],
      removed: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    nextVersion(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    approveNextVersion(
      implementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isSafelisted(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    modify(
      added: string[],
      removed: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    nextVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
